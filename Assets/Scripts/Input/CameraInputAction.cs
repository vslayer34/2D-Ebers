//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Scripts/Input/CameraInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CameraInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CameraInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CameraInputAction"",
    ""maps"": [
        {
            ""name"": ""MouseInteractions"",
            ""id"": ""a0588878-385e-4365-9c14-cbf72db32f65"",
            ""actions"": [
                {
                    ""name"": ""PrimaryClick"",
                    ""type"": ""Button"",
                    ""id"": ""9c29ef21-1165-4616-8f4f-a29cb4539707"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b34cc509-4107-4ad0-a95b-da39f9bd2950"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse"",
                    ""action"": ""PrimaryClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse"",
            ""bindingGroup"": ""Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // MouseInteractions
        m_MouseInteractions = asset.FindActionMap("MouseInteractions", throwIfNotFound: true);
        m_MouseInteractions_PrimaryClick = m_MouseInteractions.FindAction("PrimaryClick", throwIfNotFound: true);
    }

    ~@CameraInputAction()
    {
        UnityEngine.Debug.Assert(!m_MouseInteractions.enabled, "This will cause a leak and performance issues, CameraInputAction.MouseInteractions.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // MouseInteractions
    private readonly InputActionMap m_MouseInteractions;
    private List<IMouseInteractionsActions> m_MouseInteractionsActionsCallbackInterfaces = new List<IMouseInteractionsActions>();
    private readonly InputAction m_MouseInteractions_PrimaryClick;
    public struct MouseInteractionsActions
    {
        private @CameraInputAction m_Wrapper;
        public MouseInteractionsActions(@CameraInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @PrimaryClick => m_Wrapper.m_MouseInteractions_PrimaryClick;
        public InputActionMap Get() { return m_Wrapper.m_MouseInteractions; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseInteractionsActions set) { return set.Get(); }
        public void AddCallbacks(IMouseInteractionsActions instance)
        {
            if (instance == null || m_Wrapper.m_MouseInteractionsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MouseInteractionsActionsCallbackInterfaces.Add(instance);
            @PrimaryClick.started += instance.OnPrimaryClick;
            @PrimaryClick.performed += instance.OnPrimaryClick;
            @PrimaryClick.canceled += instance.OnPrimaryClick;
        }

        private void UnregisterCallbacks(IMouseInteractionsActions instance)
        {
            @PrimaryClick.started -= instance.OnPrimaryClick;
            @PrimaryClick.performed -= instance.OnPrimaryClick;
            @PrimaryClick.canceled -= instance.OnPrimaryClick;
        }

        public void RemoveCallbacks(IMouseInteractionsActions instance)
        {
            if (m_Wrapper.m_MouseInteractionsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMouseInteractionsActions instance)
        {
            foreach (var item in m_Wrapper.m_MouseInteractionsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MouseInteractionsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MouseInteractionsActions @MouseInteractions => new MouseInteractionsActions(this);
    private int m_MouseSchemeIndex = -1;
    public InputControlScheme MouseScheme
    {
        get
        {
            if (m_MouseSchemeIndex == -1) m_MouseSchemeIndex = asset.FindControlSchemeIndex("Mouse");
            return asset.controlSchemes[m_MouseSchemeIndex];
        }
    }
    public interface IMouseInteractionsActions
    {
        void OnPrimaryClick(InputAction.CallbackContext context);
    }
}
